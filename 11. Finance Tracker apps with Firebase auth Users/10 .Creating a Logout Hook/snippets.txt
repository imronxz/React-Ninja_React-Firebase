_useLogout.js

import { useState } from 'react';
import { projectAuth } from '../firebase/config';
import { useAuthContext } from './useAuthContext';

export const useLogout = () => {
  const [error, setError] = useState(null);
  const [isPending, setIsPending] = useState(false);
  const { dispatch } = useAuthContext();

  const logout = async () => {
    setError(null);
    setIsPending(true);

    // TODO: Logout user
    try {
      // * Signs out the current user with signOut firebase methdos.
      await projectAuth.signOut();

      // * Dispatch logout action
      dispatch({ type: 'LOGOUT' });

      setIsPending(false);
      setError(null);
    } catch (error) {
      console.log(error.message);
      setError(error.message);
      setIsPending(false);
    }
  };

  // TODO: Return logout function
  return { error, isPending, logout };
};
---------------------------------------------------------------------------------------------------------------------
_AuthContext.js

import { createContext, useReducer } from 'react';

//FIXME: createContext() as AuthContext
export const AuthContext = createContext();

/*  TODO: Define reducer ->
 * Dispatching action function
 * Case LOGIN return user: action.payload
 * Case LOGOUT return user: null
*/
export const authReducer = (state, action) => {
  switch (action.type) {
    case 'LOGIN':
      return { ...state, user: action.payload };
    case 'LOGOUT':
      return { ...state, user: null };
    default:
      return state;
  }
};

/*  TODO: Define AuthContextProvider ->
 * define global state store
 * React.Context.Provider { { children } }
*/
export const AuthContextProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, {
    user: null,
  });

  console.log('Auth Context state:', state);

  return (
    <AuthContext.Provider value={{ ...state, dispatch }}>
      {children}
    </AuthContext.Provider>
  );
};
